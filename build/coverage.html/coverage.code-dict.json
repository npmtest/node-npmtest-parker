{"/home/travis/build/npmtest/node-npmtest-parker/test.js":"/* istanbul instrument in package npmtest_parker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-parker/lib.npmtest_parker.js":"/* istanbul instrument in package npmtest_parker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_parker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_parker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-parker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-parker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_parker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_parker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_parker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_parker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_parker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_parker.__dirname + '/lib.npmtest_parker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/parker.js":"#!/usr/bin/env node\n\n/*! csstool v0.0.0 - MIT license */\n\n'use strict';\n\n/**\n * Module dependencies\n */\n\nvar _ = require('lodash'),\n    Parker = require('./lib/Parker'),\n    CliController = require('./lib/CliController'),\n    metrics = require('./metrics/All'),\n    formatters = require('./lib/Formatters'),\n    argv = require('minimist')(process.argv.slice(2)),\n    fs = require('graceful-fs'),\n    async = require('async'),\n    path = require('path'),\n    info = require('./lib/Info');\n\nvar cliController = new CliController();\n\ncliController.on('runPaths', function (filePaths) {\n    var stylesheets = [];\n    async.each(filePaths, function (filePath, onAllLoad) {\n        var onFileLoad = function (err, data) {\n            stylesheets.push(data);\n        };\n\n        if (!fileIsStylesheet(filePath)) {\n            readDirectory(filePath, onFileLoad, onAllLoad);\n        }\n        else {\n            readFile(filePath, function (err, data) { onFileLoad(err, data); onAllLoad();});\n        }\n\n    }, function (err) {\n        runReport(stylesheets, metrics);\n    });\n});\n\ncliController.on('runStdin', function () {\n    process.stdin.resume();\n    process.stdin.setEncoding('utf8');\n    var stdinData = '';\n\n    process.stdin.on('data', function(chunk) {\n        stdinData += chunk;\n    });\n\n    process.stdin.on('end', function() {\n        runReport(stdinData, metrics);\n    });\n});\n\ncliController.on('showVersion', function () {\n    info.version();\n    process.exit();\n});\n\ncliController.on('showHelp', function () {\n    info.help();\n    process.exit();\n});\n\ncliController.on('setFormat', function (format) {\n    formatter = formatters[format];\n\n    if (!formatter) {\n        console.error('Unknown output format: %s', argv.format);\n        console.error('  available: ' + Object.keys(formatters).join(' '));\n        process.exit(1);\n    }\n});\n\ncliController.on('showNumericOnly', function () {\n    metrics = _.filter(metrics, function (metric) {\n        return metric.format == 'number';\n    });\n});\n\nvar readDirectory = function (directoryPath, onFileLoad, onAllLoad) {\n    fs.readdir(directoryPath, function (err, files) {\n        async.each(files, function (file, fileDone) {\n            if (!fileIsStylesheet(file)) {\n                return fileDone();\n            }\n\n            readFile(path.join(directoryPath, file), function(err, fileData) {\n                onFileLoad(err, fileData);\n                fileDone();\n            });\n        }, onAllLoad);\n    });\n};\n\nvar readFile = function (filePath, onLoad) {\n    fs.readFile(filePath, {encoding: 'utf8'}, function (err, fileData) {\n        onLoad(err, fileData);\n    });\n};\n\nvar fileIsStylesheet = function (filePath) {\n    return filePath.indexOf('.css') !== -1;\n};\n\nvar runReport = function (stylesheets, metrics) {\n    var results = parker.run(stylesheets);\n    console.log(formatter(metrics, results));\n};\n\nif (module.parent) {\n    module.exports = Parker;\n} else {\n    var parker = new Parker(metrics),\n    formatter = formatters['human'];\n    cliController.dispatch(argv);\n}","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/lib/Parker.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash'),\n    CssStylesheet = require('./CssStylesheet.js'),\n    CssRule = require('./CssRule.js'),\n    CssSelector = require('./CssSelector.js'),\n    CssDeclaration = require('./CssDeclaration.js'),\n    CssMediaQuery = require('./CssMediaQuery.js');\n\nvar VALID_METRIC_TYPE = /stylesheet|rule|selector|identifier|declaration|property|value|mediaquery/g;\n\nfunction Parker(metrics) {\n    this.metrics = metrics;\n}\n\nParker.prototype.run = function () {\n    var args = arguments;\n\n    if (arguments.length === 1 && _.isArray(arguments[0])) {\n        args = arguments[0];\n    }\n\n    args = _.filter(args, function (argument) {return _.isString(argument); });\n    var metrics = _.filter(this.metrics, function (metric) {return metric.type.match(VALID_METRIC_TYPE); });\n\n    if (args.length > 0) {\n        return runMetrics(metrics, args);\n    }\n\n    throw {'message': 'No valid stylesheet data supplied', 'name': 'DataTypeException'};\n};\n\nvar runMetrics = function (metrics, stylesheets) {\n    var readings = [];\n\n    _.each(stylesheets, function (rawStylesheet) {\n        readings.push(runMetricsOnNode(metrics, rawStylesheet, 'stylesheet'));\n\n        var stylesheet = new CssStylesheet(rawStylesheet),\n            rules = stylesheet.getRules() || [];\n\n        _.each(stylesheet.getMediaQueries(), function (rawMediaQuery) {\n            var mediaQuery = new CssMediaQuery(rawMediaQuery);\n            _.each(mediaQuery.getQueries(), function (query) {\n                readings.push(runMetricsOnNode(metrics, query, 'mediaquery'));\n            });\n\n            rules = rules.concat(mediaQuery.getRules());\n        });\n\n        _.each(rules, function (rawRule) {\n            readings.push(runMetricsOnNode(metrics, rawRule, 'rule'));\n\n            var rule = new CssRule(rawRule);\n            _.each(rule.getSelectors(), function (rawSelector) {\n                var selector = new CssSelector(rawSelector);\n                readings.push(runMetricsOnNode(metrics, rawSelector, 'selector'));\n\n                _.each(selector.getIdentifiers(), function (rawIdentifier) {\n                    readings.push(runMetricsOnNode(metrics, rawIdentifier, 'identifier'));\n                });\n            });\n\n            _.each(rule.getDeclarations(), function (rawDeclaration) {\n                var declaration = new CssDeclaration(rawDeclaration);\n\n                readings.push(runMetricsOnNode(metrics, rawDeclaration, 'declaration'));\n                readings.push(runMetricsOnNode(metrics, declaration.getProperty(), 'property'));\n                readings.push(runMetricsOnNode(metrics, declaration.getValue(), 'value'));\n            });\n        });\n    });\n\n    var data = readings.reduce(mergeArrayAttributes);\n    data = aggregateData(data, metrics);\n\n    return data;\n};\n\nvar runMetricsOnNode = function (metrics, node, type) {\n    var data = {};\n    _.each(filterMetricsByType(metrics, type), function (metric) {\n        var measurement = metric.measure(node);\n        if (!_.isArray(measurement)) {\n            measurement = [measurement];\n        }\n\n        data[metric.id] = measurement;\n    });\n\n    return data;\n};\n\nvar aggregateData = function (data, metrics) {\n    _.each(metrics, function (metric) {\n        if (!data[metric.id]) {\n            data[metric.id] = [];\n        }\n\n        switch (metric.aggregate) {\n            case 'sum':\n                data[metric.id] = aggregateSum(data[metric.id]);\n                break;\n            case 'mean':\n                data[metric.id] = aggregateMean(data[metric.id]);\n                break;\n            case 'max':\n                data[metric.id] = aggregateMax(data[metric.id], metric.iterator);\n                break;\n            case 'list':\n                data[metric.id] = aggregateList(data[metric.id], metric.filter);\n                break;\n            case 'length':\n                data[metric.id] = aggregateLength(data[metric.id], metric.filter);\n                break;\n        }\n    });\n\n    return data;\n};\n\nvar aggregateSum = function (data) {\n    return sum(data);\n};\n\nvar aggregateMean = function (data) {\n    if (data.length === 0) {\n        return 0;\n    }\n    return mean(data);\n};\n\nvar aggregateMax = function (data, iterator) {\n    if (data.length === 0) {\n        return 0;\n    }\n    if (_.isUndefined(iterator)) {\n        return _.max(data);\n    }\n\n    return _.max(data, iterator);\n};\n\nvar aggregateList = function (data, filter) {\n    if (!_.isUndefined(filter)) {\n        return _.compact(data.filter(filter));\n    }\n\n    return _.compact(data);\n};\n\nvar aggregateLength = function (data, filter) {\n    if (!_.isUndefined(filter)) {\n        return data.filter(filter).length;\n    }\n\n    return _.compact(data).length;\n};\n\nvar mergeArrayAttributes = function (target, source) {\n    _.each(source, function (attribute, attributeName) {\n        if  (!_.has(target, attributeName)) {\n            target[attributeName] = [];\n        }\n\n        if (!_.isUndefined(attribute)) {\n            if (_.isString(attribute)) {\n                attribute = [attribute];\n            }\n\n            target[attributeName] = target[attributeName].concat(attribute);\n        }\n    });\n\n    return target;\n};\n\nvar sum = function (values) {\n    if (values.length === 0) {\n        return 0;\n    }\n    return values.reduce(function (previous, current) {return previous + current; });\n};\n\nvar mean = function (values) {\n    var valuesSum = sum(values);\n\n    return valuesSum / values.length;\n};\n\nvar filterMetricsByType = function (metrics, type) {\n    if (type) {\n        return metrics.filter(function (metric) {return metric.type === type; });\n    }\n\n    return metrics;\n};\n\nmodule.exports = Parker;\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/lib/CssStylesheet.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nfunction CssStylesheet(raw) {\n    this.raw = raw;\n}\n\nCssStylesheet.prototype.getRules = function () {\n    this.children = this.children || getChildren(this.raw);\n\n    return this.children.filter(function (child) {\n        return isRule(child);\n    });\n};\n\nCssStylesheet.prototype.getMalformedStatements = function () {\n    this.children = this.children || getChildren(this.raw);\n\n    return this.children.filter(function (child) {\n        return isMalformedStatement(child);\n    });\n};\n\nCssStylesheet.prototype.getMediaQueries = function () {\n    this.children = this.children || getChildren(this.raw);\n    return this.children.filter(function (child) {\n        return isMediaQuery(child);\n    });\n};\n\nvar getChildren = function (raw) {\n    var children = [],\n        depth = 0,\n        child = '',\n        stylesheet = stripComments(stripFormatting(raw));\n\n    for (var index = 0; index < stylesheet.length; index++) {\n        child += stylesheet.charAt(index);\n        if (stylesheet.charAt(index) === '{') {\n            depth ++;\n        }\n        else if (stylesheet.charAt(index) == '}') {\n            depth --;\n        }\n\n        if (depth === 0 && stylesheet.charAt(index).match(/\\}|;/g)) {\n            children.push(child.trim());\n            child = '';\n        }\n    }\n    return children;\n};\n\nvar stripComments = function (string) {\n    return string.replace(/\\/\\*.+?\\*\\//g, '');\n};\n\nvar stripFormatting = function (string) {\n    return stripNewlines(trimWhitespace(string));\n};\n\nvar trimWhitespace = function (string) {\n    return string.replace(/[ ]+/g, ' ');\n};\n\nvar stripNewlines = function (string) {\n    return string.replace(/\\n|\\r|\\r\\n/g, '');\n};\n\nvar isRule = function (string) {\n    return !isMediaQuery(string) && hasRuleBlock(string) && hasSelectorBlock(string);\n}\n\nvar isMalformedStatement = function (string) {\n    return !isRule(string) && !isMediaQuery(string);\n}\n\nvar hasRuleBlock = function (string) {\n    return string.indexOf('{') !== -1 && string.indexOf('}') !== -1;\n}\n\nvar hasSelectorBlock = function (string) {\n    return string.match(/^[^\\{]+/g)\n}\n\nvar isMediaQuery = function (string) {\n    return string.match(/^@media/g);\n}\n\nmodule.exports = CssStylesheet;\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/lib/CssRule.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nfunction CssRule(raw) {\n    this.raw = raw;\n}\n\nCssRule.prototype.getSelectors = function () {\n    return getSelectors(getSelectorBlock(this.raw));\n};\n\nCssRule.prototype.getDeclarations = function () {\n    return getDeclarations(getDeclarationBlock(this.raw));\n};\n\nvar getSelectorBlock = function (rule) {\n    var pattern = /([^{]+)\\{/g,\n        results = pattern.exec(rule);\n\n    return results[1];\n};\n\nvar getSelectors = function (selectorBlock) {\n    var untrimmedSelectors = selectorBlock.split(','),\n        trimmedSelectors = untrimmedSelectors.map(function (untrimmed) {\n            return untrimmed.trim();\n        });\n\n    return _.compact(trimmedSelectors);\n};\n\nvar getDeclarationBlock = function (rule) {\n    var pattern = /\\{(.+)\\}/g,\n        results = pattern.exec(rule);\n\n    if (_.isNull(results)) {\n        return '';\n    }\n\n    return results[1];\n};\n\nvar getDeclarations = function (declarationBlock) {\n    var untrimmedDeclarations = _.compact(declarationBlock.trim().split(';')),\n        trimmedDeclarations = untrimmedDeclarations.map(function (untrimmed) {\n            return untrimmed.trim();\n        });\n\n    return trimmedDeclarations;\n};\n\nmodule.exports = CssRule;\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/lib/CssSelector.js":"/*! Parker v0.1.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash'),\n    DELIMITERS = ['.', '#', '>', '[', ' ', ':', '*'];\n\nfunction CssSelector(raw) {\n    this.raw = raw;\n    this.identifiers = [];\n}\n\nCssSelector.prototype.getIdentifiers = function () {\n    var identifier = '',\n        bracketDepth = 0,\n        parenDepth = 0;\n\n    _.each(this.raw, function (character, index) {\n        var insideBrackets = bracketDepth || parenDepth,\n            isSecondColon = character == ':' && this.raw[index - 1] == ':';\n\n        if (!insideBrackets && isDelimiter(character) && !isSecondColon) {\n            this.addIdentifier(identifier);\n            identifier = '';\n        }\n\n        switch(character) {\n            case '(': parenDepth++; break;\n            case ')': parenDepth--; break;\n            case '[': bracketDepth++; break;\n            case ']': bracketDepth--; break;\n        }\n\n        if (!_.contains([' ', '>'], character)) {\n            identifier += character;\n        }\n    }, this);\n\n    this.addIdentifier(identifier);\n    return _.without(this.identifiers, ' ', '', '[]');\n}\n\nCssSelector.prototype.addIdentifier = function (identifier) {\n    this.identifiers.push(identifier);\n};\n\nfunction isDelimiter(character) {\n    return _.contains(DELIMITERS, character)\n}\n\nmodule.exports = CssSelector;\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/lib/CssDeclaration.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nfunction CssDeclaration(raw) {\n\n    this.raw = raw;\n}\n\nCssDeclaration.prototype.getProperty = function () {\n    if (this.raw.indexOf(':') === -1) {\n        return '';\n    }\n\n    return this.raw.split(':')[0].trim();\n};\n\nCssDeclaration.prototype.getValue = function () {\n    if (this.raw.indexOf(':') === -1) {\n        return '';\n    }\n\n    return this.raw.split(':')[1].trim();\n};\n\nmodule.exports = CssDeclaration;","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/lib/CssMediaQuery.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nfunction CssMediaQuery(raw) {\n\tthis.raw = raw;\n}\n\nCssMediaQuery.prototype.getQueries = function () {\n\tvar pattern = /@media\\w*(.+?)\\s?{/,\n\t\tqueries = pattern.exec(this.raw)[1];\n\n\treturn queries.split(/ or |,/g).map(trimQuery);\n};\n\nCssMediaQuery.prototype.getRules = function () {\n    var rules = [],\n        depth = 0,\n        rule = '';\n\n    for (var index = 0; index < this.raw.length; index++) {\n    \tif (depth > 0) {\n\t        rule += this.raw.charAt(index);\n\t    }\n        if (this.raw.charAt(index) === '{') {\n            depth ++;\n        }\n        else if (this.raw.charAt(index) == '}') {\n            depth --;\n        }\n\n        if (depth === 1 && this.raw.charAt(index) == '}') {\n            rules.push(rule.trim());\n            rule = '';\n        }\n    }\n    return rules;\n};\n\nvar trimQuery = function (query) {\n\treturn query.trim();\n};\n\nmodule.exports = CssMediaQuery;","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/lib/CliController.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar util = require('util'),\n    events = require('events');\n\nfunction CliController() {\n    events.EventEmitter.call(this);\n}\n\nutil.inherits(CliController, events.EventEmitter);\n\nCliController.prototype.dispatch = function (argv) {\n    if (argv.v || argv.version) {\n        this.emit('showVersion');\n    }\n    if (argv.h || argv.help) {\n        this.emit('showHelp');\n    }\n    if (argv.f || argv.format) {\n        var format = argv.f || argv.format;\n        this.emit('setFormat', format);\n    }\n    if (argv.n || argv.numeric) {\n        this.emit('showNumericOnly');\n    }\n    if (argv._ && argv._.length) {\n        this.emit('runPaths', argv._);\n    }\n    else if (argv.s || argv.stdin) {\n        this.emit('runStdin');\n    }\n    else {\n        // No data supplied - show help\n        this.emit('showHelp');\n    }\n};\n\nmodule.exports = CliController;","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/All.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nmodule.exports = [\n    // Stylesheet Totals\n    require('./TotalStylesheets.js'),\n    require('./TotalStylesheetSize.js'),\n\n    // Stylesheet Element Totals\n    require('./TotalRules.js'),\n    require('./TotalSelectors.js'),\n    require('./TotalIdentifiers.js'),\n    require('./TotalDeclarations.js'),\n\n    // Stylesheet Element Averages\n    require('./SelectorsPerRule.js'),\n    require('./IdentifiersPerSelector.js'),\n\n    // Specificity\n    require('./SpecificityPerSelector.js'),\n    require('./TopSelectorSpecificity.js'),\n    require('./TopSelectorSpecificitySelector.js'),\n    require('./TotalIdSelectors.js'),\n\n    // Colour\n    require('./TotalUniqueColours.js'),\n    require('./UniqueColours.js'),\n\n    // Important Keywords\n    require('./TotalImportantKeywords.js'),\n\n    // Media Queries\n    require('./TotalMediaQueries.js'),\n    require('./MediaQueries.js')\n];\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TotalStylesheets.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nmodule.exports = {\n    id: 'total-stylesheets',\n    name: 'Total Stylesheets',\n    type: 'stylesheet',\n    aggregate: 'sum',\n    format: 'number',\n    measure: function (stylesheet) {\n        return 1;\n    }\n};","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TotalStylesheetSize.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nmodule.exports = {\n    id: 'total-stylesheet-size',\n    name: 'Total Stylesheet Size',\n    type: 'stylesheet',\n    aggregate: 'sum',\n    format: 'number',\n    measure: function (stylesheet) {\n        return byteCount(stylesheet);\n    }\n};\n\nfunction byteCount(s) {\n    return encodeURI(s).split(/%..|./).length - 1;\n}","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TotalRules.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nmodule.exports = {\n    id: 'total-rules',\n    name: 'Total Rules',\n    type: 'rule',\n    aggregate: 'sum',\n    format: 'number',\n    measure: function (rule) {\n        return 1;\n    }\n};","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TotalSelectors.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = {\n    id: 'total-selectors',\n    name: 'Total Selectors',\n    type: 'selector',\n    aggregate: 'sum',\n    format: 'number',\n    measure: function (selector) {\n        return 1;\n    }\n};","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TotalIdentifiers.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = {\n    id: 'total-identifiers',\n    name: 'Total Identifiers',\n    type: 'identifier',\n    aggregate: 'sum',\n    format: 'number',\n    measure: function (identifier) {\n        return 1;\n    }\n};","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TotalDeclarations.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nmodule.exports = {\n    id: 'total-declarations',\n    name: 'Total Declarations',\n    type: 'declaration',\n    aggregate: 'sum',\n    format: 'number',\n    measure: function (declaration) {\n        return 1;\n    }\n};","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/SelectorsPerRule.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nmodule.exports = {\n    id: 'selectors-per-rule',\n    name: 'Selectors Per Rule',\n    type: 'rule',\n    aggregate: 'mean',\n    format: 'number',\n    measure: function (rule) {\n        return getSelectors(getSelectorBlock(rule)).length;\n    }\n};\n\nvar getSelectorBlock = function (rule) {\n    var pattern = /([^{]+)\\{/g,\n        results = pattern.exec(rule);\n\n    return results[1];\n};\n\nvar getSelectors = function (selectorBlock) {\n    var untrimmedSelectors = selectorBlock.split(','),\n        trimmedSelectors = untrimmedSelectors.map(function (untrimmed) {\n            return untrimmed.trim();\n        });\n\n    return trimmedSelectors;\n};","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/IdentifiersPerSelector.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = {\n    id: 'identifiers-per-selector',\n    name: 'Identifiers Per Selector',\n    type: 'selector',\n    aggregate: 'mean',\n    format: 'number',\n    measure: function (selector) {\n        var identifiers = getIdentifiers(selector);\n\n        if (identifiers.length === 1 && identifiers[0] === '') {\n            return 0;\n        }\n\n        return identifiers.length;\n    }\n};\n\nvar getIdentifiers = function (selector) {\n    var identifiers = [],\n        segments = selector.split(/\\s+[\\s\\+>]\\s?|~^=/g);\n\n    _.each(segments, function (segment) {\n        identifiers = identifiers.concat(segment.match(/[#\\.:]?[\\w\\-\\*]+|\\[[\\w=\\-~'\"\\|]+\\]|:{2}[\\w-]+/g) || []);\n    });\n\n    return identifiers;\n};","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/SpecificityPerSelector.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\nvar CssSelector = require('../lib/CssSelector');\n\nmodule.exports = {\n    id: 'specificity-per-selector',\n    name: 'Specificity Per Selector',\n    type: 'selector',\n    aggregate: 'mean',\n    format: 'number',\n    measure: function (rawSelector) {\n        var totalSpecificity = 0,\n            selector = new CssSelector(rawSelector);\n\n        _.each(selector.getIdentifiers(), function (identifier) {\n            var idIdentifiers = countIdIdentifiers(identifier),\n                classIdentifiers = countClassIdentifiers(identifier),\n                attributeIdentifiers = countAttributeIdentifiers(identifier),\n                pseudoClassIdentifiers = countPseudoClassIdentifiers(identifier),\n                typeIdentifiers = countTypeIdentifiers(identifier),\n                pseudoElementIdentifiers = countPseudoElementIdentifiers(identifier);\n\n            totalSpecificity += Number(\n                String(idIdentifiers) +\n                String(classIdentifiers + attributeIdentifiers + pseudoClassIdentifiers) +\n                String(typeIdentifiers + pseudoElementIdentifiers));\n        });\n\n        return totalSpecificity;\n    }\n};\n\nvar countIdIdentifiers = function (identifier) {\n    var regex = /#/,\n        matches = regex.exec(identifier);\n\n    if (matches && !countAttributeIdentifiers(identifier)) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countClassIdentifiers = function (identifier) {\n    var regex = /\\./,\n        matches = regex.exec(identifier);\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countAttributeIdentifiers = function (identifier) {\n    var regex = /\\[/,\n        matches = regex.exec(identifier);\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countPseudoClassIdentifiers = function  (identifier) {\n    var regex = /^:[^:]/,\n        matches = regex.exec(identifier);\n\n    // :not pseudo-class identifier itself is ignored\n    // only selectors inside it are counted\n    if (identifier.match(/:not/)) {\n        return 0;\n    }\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countTypeIdentifiers = function (identifier) {\n    var regex = /^[a-zA-Z_]/;\n\n    if (regex.exec(identifier)) {\n        return 1;\n    }\n\n    return 0;\n};\n\nvar countPseudoElementIdentifiers = function (identifier) {\n    var regex = /::/,\n        matches = regex.exec(identifier);\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar stripNotIdentifier = function (identifier) {\n    if (identifier.match(/:not/)) {\n        return identifier.replace(/:not\\(|\\)/g, '');\n    }\n\n    return identifier;\n};\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TopSelectorSpecificity.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\nvar CssSelector = require('../lib/CssSelector');\n\nmodule.exports = {\n    id: 'top-selector-specificity',\n    name: 'Top Selector Specificity',\n    type: 'selector',\n    aggregate: 'max',\n    format: 'number',\n    measure: function (rawSelector) {\n        var selector = new CssSelector(rawSelector),\n            identifiers = selector.getIdentifiers(),\n            specificity = 0;\n\n        _.each(identifiers, function (identifier) {\n            identifier = stripNotIdentifier(identifier);\n\n            var idIdentifiers = countIdIdentifiers(identifier),\n                classIdentifiers = countClassIdentifiers(identifier),\n                attributeIdentifiers = countAttributeIdentifiers(identifier),\n                pseudoClassIdentifiers = countPseudoClassIdentifiers(identifier),\n                typeIdentifiers = countTypeIdentifiers(identifier),\n                pseudoElementIdentifiers = countPseudoElementIdentifiers(identifier);\n\n            specificity += getSpecificity(idIdentifiers, classIdentifiers, attributeIdentifiers, pseudoClassIdentifiers, typeIdentifiers, pseudoElementIdentifiers);\n\n        }, this);\n\n        return specificity;\n    }\n};\n\nvar getSpecificity = function (idIdentifiers, classIdentifiers, attributeIdentifiers, pseudoClassIdentifiers, typeIdentifiers, pseudoElementIdentifiers) {\n    return Number(\n        String(idIdentifiers) +\n        String(classIdentifiers + attributeIdentifiers + pseudoClassIdentifiers) +\n        String(typeIdentifiers + pseudoElementIdentifiers)\n    );\n};\n\nvar countIdIdentifiers = function (identifier) {\n    var regex = /#/,\n        matches = regex.exec(identifier);\n\n    if (matches && !countAttributeIdentifiers(identifier)) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countClassIdentifiers = function (identifier) {\n    var regex = /\\./,\n        matches = regex.exec(identifier);\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countAttributeIdentifiers = function (identifier) {\n    var regex = /\\[/,\n        matches = regex.exec(identifier);\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countPseudoClassIdentifiers = function  (identifier) {\n    var regex = /^:[^:]/,\n        matches = regex.exec(identifier);\n\n    // :not pseudo-class identifier itself is ignored\n    // only selectors inside it are counted\n    if (identifier.match(/:not/)) {\n        return 0;\n    }\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countTypeIdentifiers = function (identifier) {\n    var regex = /^[a-zA-Z_]/;\n\n    if (regex.exec(identifier)) {\n        return 1;\n    }\n\n    return 0;\n};\n\nvar countPseudoElementIdentifiers = function (identifier) {\n    var regex = /::/,\n        matches = regex.exec(identifier);\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar stripNotIdentifier = function (identifier) {\n    if (identifier.match(/:not/)) {\n        return identifier.replace(/:not\\(|\\)/g, '');\n    }\n\n    return identifier;\n};\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TopSelectorSpecificitySelector.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\nvar CssSelector = require('../lib/CssSelector')\n\nmodule.exports = {\n    id: 'top-selector-specificity-selector',\n    name: 'Top Selector Specificity Selector',\n    type: 'selector',\n    aggregate: 'max',\n    format: 'string',\n    measure: function (selector) {\n        return selector;\n    },\n    iterator: function (rawSelector) {\n        var selector = new CssSelector(rawSelector),\n            identifiers = selector.getIdentifiers(),\n            specificity = 0;\n\n        _.each(identifiers, function (identifier) {\n            var idIdentifiers = countIdIdentifiers(identifier),\n                classIdentifiers = countClassIdentifiers(identifier),\n                attributeIdentifiers = countAttributeIdentifiers(identifier),\n                pseudoClassIdentifiers = countPseudoClassIdentifiers(identifier),\n                typeIdentifiers = countTypeIdentifiers(identifier),\n                pseudoElementIdentifiers = countPseudoElementIdentifiers(identifier);\n\n            specificity += getSpecificity(idIdentifiers, classIdentifiers, attributeIdentifiers, pseudoClassIdentifiers, typeIdentifiers, pseudoElementIdentifiers);\n\n        }, this);\n\n        return specificity;\n    }\n};\n\nvar getSpecificity = function (idIdentifiers, classIdentifiers, attributeIdentifiers, pseudoClassIdentifiers, typeIdentifiers, pseudoElementIdentifiers) {\n    return Number(\n        String(idIdentifiers) +\n        String(classIdentifiers + attributeIdentifiers + pseudoClassIdentifiers) +\n        String(typeIdentifiers + pseudoElementIdentifiers)\n    );\n};\n\nvar countIdIdentifiers = function (identifier) {\n    var regex = /#/,\n        matches = regex.exec(identifier);\n\n    if (matches && !countAttributeIdentifiers(identifier)) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countClassIdentifiers = function (identifier) {\n    var regex = /\\./,\n        matches = regex.exec(identifier);\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countAttributeIdentifiers = function (identifier) {\n    var regex = /\\[/,\n        matches = regex.exec(identifier);\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countPseudoClassIdentifiers = function  (identifier) {\n    var regex = /^:[^:]/,\n        matches = regex.exec(identifier);\n\n    // :not pseudo-class identifier itself is ignored\n    // only selectors inside it are counted\n    if (identifier.match(/:not/)) {\n        return 0;\n    }\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar countTypeIdentifiers = function (identifier) {\n    var regex = /^[a-zA-Z_]/;\n\n    if (regex.exec(identifier)) {\n        return 1;\n    }\n\n    return 0;\n};\n\nvar countPseudoElementIdentifiers = function (identifier) {\n    var regex = /::/,\n        matches = regex.exec(identifier);\n\n    if (matches) {\n        return matches.length;\n    }\n\n    return 0;\n};\n\nvar stripNotIdentifier = function (identifier) {\n    if (identifier.match(/:not/)) {\n        return identifier.replace(/:not\\(|\\)/g, '');\n    }\n\n    return identifier;\n};\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TotalIdSelectors.js":"\n/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = {\n    id: 'total-id-selectors',\n    name: 'Total Id Selectors',\n    type: 'selector',\n    aggregate: 'sum',\n    format: 'number',\n    measure: function (selector) {\n\t\tvar ids = 0;\n\t\tvar inBrackets = false;\n\n\t\t_.forOwn(selector, function (char) {\n\t\t\tif (char === '[') {\n\t\t\t\tinBrackets = true;\n\t\t\t} else if (char === ']') {\n\t\t\t\tinBrackets = false;\n\t\t\t} else if (char === '#' && !inBrackets) {\n\t\t\t\tids++;\n\t\t\t}\n\t\t});\n\n\t\treturn ids;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TotalUniqueColours.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = {\n    id: 'total-unique-colours',\n    name: 'Total Unique Colors',\n    type: 'value',\n    aggregate: 'length',\n    format: 'number',\n    measure: function (value) {\n        return getColourHexes(value).map(function (colourHex) {\n            return getLongHashForm(colourHex).toUpperCase();\n        });\n    },\n    filter: function (value, index, self) {\n        return self.indexOf(value) === index;\n    }\n};\n\nvar getColourHexes = function (value) {\n    var colourHexes = value.match(/#[0-9a-fA-F]{3,6}/g);\n\n    if (_.isNull(colourHexes)) {\n        colourHexes = [];\n    }\n\n    return colourHexes;\n};\n\nvar getLongHashForm = function (string) {\n    if (string.length === 4) {\n        var r = string.substring(1, 2),\n            g = string.substring(2, 3),\n            b = string.substring(3);\n        return '#' + r + r + g + g + b + b;\n    }\n\n    return string;\n};","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/UniqueColours.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = {\n    id: 'unique-colours',\n    name: 'Unique Colors',\n    type: 'value',\n    aggregate: 'list',\n    format: 'list',\n    measure: function (value) {\n        return getColourHexes(value).map(function (colourHex) {\n            return getLongHashForm(colourHex).toUpperCase();\n        });\n    },\n    filter: function (value, index, self) {\n        return self.indexOf(value) === index;\n    }\n};\n\nvar getColourHexes = function (value) {\n    var colourHexes = value.match(/#[0-9a-fA-F]{3,6}/g);\n\n    if (_.isNull(colourHexes)) {\n        colourHexes = [];\n    }\n\n    return colourHexes;\n};\n\nvar getLongHashForm = function (string) {\n    if (string.length === 4) {\n        var r = string.substring(1, 2),\n            g = string.substring(2, 3),\n            b = string.substring(3);\n        return '#' + r + r + g + g + b + b;\n    }\n\n    return string;\n};","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TotalImportantKeywords.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = {\n    id: 'total-important-keywords',\n    name: 'Total Important Keywords',\n    type: 'value',\n    aggregate: 'sum',\n    format: 'number',\n    measure: function (value) {\n        if (value.match(/!important/g))\n            return 1;\n        return 0;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/TotalMediaQueries.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = {\n    id: 'total-media-queries',\n    name: 'Total Media Queries',\n    type: 'mediaquery',\n    aggregate: 'length',\n    format: 'number',\n    measure: function (query) {\n        return query;\n    },\n    filter: function (value, index, self) {\n        return self.indexOf(value) === index;\n    }\n};","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/metrics/MediaQueries.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = {\n    id: 'media-queries',\n    name: 'Media Queries',\n    type: 'mediaquery',\n    aggregate: 'list',\n    format: 'list',\n    measure: function (query) {\n        return query;\n    },\n    filter: function (value, index, self) {\n        return self.indexOf(value) === index;\n    }\n};","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/lib/Formatters.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash'),\n    clc = require('cli-color');\n\n\n// formats output as human-friendly text\nexports.human = function (metrics, results) {\n    var logo = clc.red('PA') + clc.yellow('RK') + clc.green('ER') + '-JS' + \"\\n\";\n    return logo + _.reduce(metrics, function (str, metric) {\n        return str + metric.name + ': ' + results[metric.id] + '\\n';\n    }, '');\n};\n\n// formats output as JSON\nexports.json = function (metrics, results) {\n    var ids = _.map(metrics, function (metric) {\n        return metric.id;\n    });\n    var obj = _.reduce(ids, function (obj, id) {\n        obj[id] = results[id];\n        return obj;\n    }, {});\n    return JSON.stringify(obj, null, 4);\n};\n\nexports.csv = function (metrics, results) {\n    var lineItems = [];\n    _.each(metrics, function (metric) {\n        lineItems.push('\"' + results[metric.id] + '\"');\n    });\n\n    return lineItems.join(',');\n}\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/lib/Info.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar pkg = require('../package.json');\n\nmodule.exports = {\n    version: function() {\n        console.log(pkg.name + ' v' + pkg.version);\n    },\n    help: function() {\n        module.exports.version();\n\n        [\n            pkg.description,\n            '',\n            'Usage:',\n            'parker [arguments] [file...] Run Parker on specified files',\n            '',\n            'Example Local Usage:',\n            'parker styles.css',\n            '',\n            'Example Stdin Usage:',\n            'curl http://www.katiefenn.co.uk/css/shuttle.css -s | parker -s',\n            '',\n            'Arguments:',\n            '',\n            '-f                  Set output format (see list of formats)',\n            '-h                  Shows help',\n            '-n                  Show numeric results only',\n            '-s                  Input CSS using stdin',\n            '-v                  Show version number of Parker',\n            '',\n            'Formats Usage:',\n            'parker -f \"human\"',\n            '',\n            'Formats List:',\n            'human               Human-readable, newline separated format (default)',\n            'json                JSON',\n            'csv                 CSV',\n            '',\n            'For more information, see ' + pkg.homepage\n        ].forEach(function(str) { console.log(str); });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-parker/node_modules/parker/lib/CliFormatter.js":"/*! Parker v0.0.0 - MIT license */\n\n'use strict';\n\nvar _ = require('lodash');\n\nfunction CliFormatter() {\n\n}\n\nCliFormatter.prototype.format = function (data, metrics) {\n\tvar output = '';\n    _.each(metrics, function(metric) {\n        output += metric.name + \": \" + data[metric.id];\n        output += \"\\n\";\n    });\n\n\treturn output;\n};\n\nmodule.exports = CliFormatter;\n"}